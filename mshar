#!/bin/env sh
# mshar -- MXPSQL's version of the Shell archiver
# It's better than shar
# 
# MIT License
# 
# Copyright (c) 2022 MXPSQL
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# checker, documentation generator and linter directives and suppresors
# shellcheck shell=sh
# 
# @file mshar
# @name MShar
# @author MXPSQL
# @brief My version of the shar archiver
# @description
# 		MXPSQL's version of the shell archiver,
# 		It's better than shar,
# 		You need the base64 command to use this.

# set some vars
REPO_URL="https://github.com/MOALib/mshar";
RAW_URL="https://raw.githubusercontent.com/MOALib/mshar/master/mshar";

# functions

# @brief make mshar archive
#
# @arg $1 the file to archive
# @arg $2 the startup script, put // or - if you don't want a startup script
# @arg $@ so on the file to be archived
#
# @stdout it's pretty chatty, and there is no stderr, you can just redirect it to /dev/null to mute messages
#
# @exitcode 0 if success
# @exitcode 1 if failure
# @return exitcode, the archive and stdout messages
#
# @description
# 		make mshar archive
#		this function is legacy
# 
# @example
# 		mkmshar archive start.sh file1 file2 file3
#		mkmshar archive // file1 file2 file3
#		mkmshar archive - file1 file2 file3
mkmshar(){
	
	AR2="$1";
	if test -z "$AR2"; then
		echo "MShar mkmshar: No archive name given.";
		echo "Usage: mkmshar [archive name] [startup script] files to archive ...";
		echo "Example: mkmshar archive.mshar script.sh file1 file2 file3";
		return 1;
	fi;

	START_SCRIPT2="$2";
	if test "$START_SCRIPT2" != "//" || test "$START_SCRIPT2" != "-"; then
		if test -z "$START_SCRIPT2"; then
			echo "MShar mkmshar: No startup script given.";
			echo "Usage: mkmshar [archive name] [startup script] files to archive ...";
			echo "Example: mkmshar archive.mshar script.sh file1 file2 file3 # startup script";
			echo "";
			echo "Examples with no startup script"
			echo "mkmshar archive.mshar // file1 file2 file3 # no startup script";
			echo "mkmshar archive.mshar - file1 file2 file3 # no startup script";
			return 1;
		fi;

		test -f "$START_SCRIPT2" || {
			echo "mkmshar: file $START_SCRIPT2 does not exist";
			return 1;
		}
	fi;

	shift;
	shift;

	BAS64="$(find . /bin /usr/bin /usr/local/bin -name base64* -type f | head -n 1)";

	# check if base64 command is available
	if ! command -v "$BAS64" >/dev/null 2>&1; then
		echo "Error: base64 command not found, it is required to build the archive you loser.";
		return 1;
	fi

	# first part
	{
		echo "#!/bin/sh"; # make it executable with a shebang
		echo "";
		echo "# This archive is created using mshar, MXPSQL's version of the Shell archiver";
		echo "# You need a unix bourne shell and the base64 command to extract this";
		echo "TEKTONE=;"; # TEKTONE because why not and free reference to tektone (a company)
		echo "TTk=\"\$(find . /bin /usr/bin /usr/local/bin -name base64* -type f | head -n 1)\";"; # TTk
		echo "";
		echo "echo \"This archive is created with MShar (MXPSQL's version of the Shell archiver)\"";
		echo "if ! command -v base64 >/dev/null 2>&1; then";
		echo "	echo \"Error: base64 command not found, it is required to extract the archive you loser.\";";
		echo "	exit 1;";
		echo "fi";
		echo "";

	} > "$AR2";

	if test "$START_SCRIPT2" != "//" || test "$START_SCRIPT2" != "-"; then
		cat "$START_SCRIPT2" >> "$AR2";
	fi

	# main part
	for i in "$@"; 
	do
		# notification
		echo "a - $i";

		# archive building
		# shellcheck disable=SC2016 # we don't need expansion there, we need it to be unexpanded for the shell script
		{
			echo "TEKTONE='$i';";
			echo "mkdir ./\$(dirname \"\$TEKTONE\") 2> /dev/null;";
			echo 'echo "x - ./$TEKTONE";';
			echo "printf '$("$BAS64" "$i")' > \"./\$TEKTONE\";";
			echo "tmp=\$(mktemp);";
			echo "\$TTk -d \"./\$TEKTONE\" > \"\$tmp\";";
			echo "mv \"\$tmp\" \"./\$TEKTONE\";";
			echo "tmp=;";

			# separator
			echo "";
		} >> "$AR2";
	done;

	# footer
	{
		echo "# This is a shell archive lol, created with mshar (MXPSQL's version of the Shell archiver)";
		echo "exit 0;";
	} >> "$AR2";

	# make the archive executable and add all sort of permissions lol.
	echo "Making archive executable."; chmod au+xwr "$AR2"; echo "Done making archive executable.";

	return 0;
}

# @brief make legacy mshar archive
#
# @arg $1 the file to archive
# @arg $@ so on the file to be archived
#
# @stdout it's pretty chatty, and there is no stderr, you can just redirect it to /dev/null to mute messages
#
# @exitcode 0 if success
# @exitcode 1 if failure
# @return exitcode, the archive and stdout messages
#
# @description
# 		make mshar archive
#		this function is legacy
# 
# @example
# 		mshar_legacy archive file1 file2 file3
mkmshar_legacy(){
	AR2="$1";
	if test -z "$AR2"; then
		echo "MShar mkmshar_legacy: No archive name given";
		echo "Usage: mkmshar_legacy [archive name] [files to archive, ...]";
		echo "Example: mkmshar_legacy archive.mshar file1 file2 file3";
		return 1;
	fi;

	shift;

	# TARX=$(find . /bin /usr/bin /usr/local/bin -name tar* -type f | head -n 1);
	BAS64="$(find . /bin /usr/bin /usr/local/bin -name base64* -type f | head -n 1)";

	# check if base64 command is available
	if ! command -v "$BAS64" >/dev/null 2>&1; then
		echo "Error: base64 command not found, it is required to build the archive you loser.";
		return 1;
	fi

	# first part
	{
		echo "#!/bin/sh"; # make it executable with a shebang
		echo "";
		echo "# This archive is created using mshar, MXPSQL's version of the Shell archiver";
		echo "# You need a unix bourne shell and the base64 command to extract this";
		echo "TEKTONE=;"; # TEKTONE because why not and free reference to tektone (a company)
		echo "TTk=\"\$(find . /bin /usr/bin /usr/local/bin -name base64* -type f | head -n 1)\";"; # TTk
		echo "";
		echo "echo \"This archive is created with MShar (MXPSQL's version of the Shell archiver)\"";
		echo "if ! command -v base64 >/dev/null 2>&1; then";
		echo "	echo \"Error: base64 command not found, it is required to extract the archive you loser.\";";
		echo "	exit 1;";
		echo "fi";
		echo "";
	} > "$AR2";

	# main part
	for i in "$@"; 
	do
		# notification
		echo "a - $i";

		# archive building
		# shellcheck disable=SC2016 # we don't need expansion there, we need it to be unexpanded for the shell script
		{
			echo "TEKTONE='$i';";
			echo "mkdir ./\$(dirname \"\$TEKTONE\") 2> /dev/null;";
			echo 'echo "x - ./$TEKTONE";';
			echo "printf '$("$BAS64" "$i")' > \"./\$TEKTONE\";";
			echo "tmp=\$(mktemp);";
			echo "\$TTk -d \"./\$TEKTONE\" > \"\$tmp\";";
			echo "mv \"\$tmp\" \"./\$TEKTONE\";";
			echo "tmp=;";

			# separator
			echo "";
		} >> "$AR2";
	done;

	# footer
	{
		echo "# This is a shell archive lol, created with mshar (MXPSQL's version of the Shell archiver)";
		echo "exit 0;";
	} >> "$AR2";

	# make the archive executable and add all sort of permissions lol.
	echo "Making archive executable."; chmod au+xwr "$AR2"; echo "Done making archive executable.";

	return 0;
}

# set operation

# check if no-op mode is active, use the MSHAR_NOOP variable
if test -z "$MSHAR_NOOP"; then

	# Hello
	echo "MShar: MXPSQL's version of the Shell archiver";

	OP="$1";

	# check if $OP is defined
	if test -z "$OP"; then
		echo "Usage: $(basename "$0") <mode>";
		echo "		<mode> is one of the following:";
		echo "			make-archive";
		echo "			update-self";
		echo "			version";
		echo "			help";
		echo "			noop";
		echo "";
		echo "		make-archive mode:";
		echo "			create your archive";
		echo "			args after the mode argument: <archive> <startup script> [<file> ...]";
		echo "				<archive> is the name of the archive";
		echo "				<file> is the name of the file to add to the archive, add as much as you want";
		echo "		update-self mode:";
		echo "			updates the script itself";
		echo "			args after the mode argument: none";
		echo "		version mode:";
		echo "			prints the version";
		echo "			args after the mode argument: none";
		echo "		help mode:";
		echo "			ask you to run mshar without any args";
		echo "			args after the mode argument: none";
		echo "		noop mode:";
		echo "			does nothing, useful for sourcing (the only way)";
		echo "			args after the mode argument: none (does not even process it)";
		echo "";
		exit 1;
	fi

	shift;

	if test "$OP" = "make-archive"; then

		# get the name of the archive
		AR="$1";
		START_SCRIPT="$2";
		shift;
		shift;

		# check if $AR is defined
		if test -z "$AR"; then
			echo "Usage: $(basename "$0") $OP <archive> <startup script> [<file> ...]";
		elif test "$START_SCRIPT" != "//"; then
			if test "$START_SCRIPT" != "-"; then
				if test -z "$START_SCRIPT"; then
					echo "Usage: $(basename "$0") $OP <archive> <startup script> [<file> ...]";
					echo "If you don't want a startup script, use // or -";
				fi;
			fi;
		fi;

		mkmshar "$AR" "$START_SCRIPT" "$@" && echo "Archive created. Archiving job done." || echo "Archiving failed.";
		printf "\a";

	elif test "$OP" = "update-self"; then
		echo "Updating self";

		if command -v git >/dev/null 2>&1 && test -d .git; then
			echo "Using git to update self.";
			git pull origin master;
		elif command -v wget >/dev/null 2>&1; then
			echo "Using wget to update self.";
			wget -O "$0" "$RAW_URL";
		elif command curl >/dev/null 2>&1; then
			echo "Using curl to update self.";
			curl -o "$0" "$RAW_URL";
		else
			echo "Error: git not found or the installation directory is not a git directory, you need git to update the script.";
			echo "To update, please download the script from $REPO_URL and run it or get from $RAW_URL and download it.";
		fi

		echo "Done updating self.";
	elif test "$OP" = "version"; then
		echo "It's rolling release, there is no version";
	elif test "$OP" = "help"; then
		echo "run $0 without any arguments the next time for help";
	else
		echo "Invalid operation.";
	fi

	# done doing whatever you want
	echo "Done running.";

	# exit
	exit 0;

fi

# EOF
